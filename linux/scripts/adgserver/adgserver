#!/bin/bash
#Function: as affinic debugger gui server.
#Modified date: 2014-05-15
#Author: justbitguy@gmail.com(Kyle)

VERSION="2.1"

# global flag for function d_print. 
# manually modified to "YES" when deubgging.
ENABLE_DEBUG="NO"

# global flags for debug 
USAGE="usage: `basename $0` package [-c]"
USECMD=false
TYPE_COUNT=0
OPTION_HELP="no"

# global vars for android debug 
MANIFEST="AndroidManifest.xml" 

#android_program_pid()
android_program_pid()
{
   pack_name=$1
   _pid=`adb shell ps | awk -v PACKAGE="$pack_name" '
   BEGIN {
       FS=" "
   
       if (PACKAGE == "") {
           PACKAGE="com.google.android.apps.maps"
       }
   
       PID=0
       PID_COLUMN=2
    }

    {
       gsub("\r","",$NF)
       if (NR == 1) {
           for (n = 1; n <= NF; n++) {
               if ($n == "PID") {
                   PID_COLUMN=n;
               }
           }
       } else {
       if ($NF == PACKAGE) {
           PID=$PID_COLUMN
           }
       }
    }

   END {
       print PID 
   }
   '` 
   echo $_pid
}

# run command with log
run ()
{
  echo "ADB CMD: $@"
  "$@" > /dev/null 2>&1 
}

# print log when debug 
function d_print(){
   if [ "$ENABLE_DEBUG" = "YES" ]; then 
      echo "##d_out:$@"
   fi  
}

# judge current directory is a android root directory 
function  check_in_android_directory(){
   is_android_dir="no" 
   if [ -f AndroidManifest.xml ]; then 
      if [ -d bin -a -d libs ]; then  
         is_android_dir="yes" 
      fi 
   fi 
   
   if [ $is_android_dir = "no" ]; then 
      echo "not in a andorid directory." 
      exit 4  
   fi 
}

#^^ get package name from AndroidManifest.xml 
function package_name()
{
   if [ -f $MANIFEST ]; then 
      package_name=`cat AndroidManifest.xml | grep package= | sed 's/.*="//' | sed 's/"//'`
   fi 

   if [ -z $package_name ]; then 
      echo "can not get package name from $MANIFEST."
   fi 
   
   echo $package_name
}
#$$ package_name

#^^ get activity name from AndroidManifest.xml
function activity_name()
{
    ### get Activity from manifest.
    ## print the first line number with "<activity"
    Activity_flag_line=`cat $MANIFEST | sed -n '/<activity/=' | sed -n '1p'`
    ## the 1st line with "android:name" after the 1st line with "<activity" contains the application activity name. 
    activity_name=`cat $MANIFEST | sed -n "$Activity_flag_line, /android:name/p" | grep android:name | sed 's/^.*="//' | sed 's/"//'`
    echo $activity_name 
}
#$$ activity_name

#^^ get apk name from .project
function apk_name(){
   APK_NAME=`cat .project | sed -n '/name/'p | sed -n '1p' | sed 's/<name>//' | sed 's/<.*$//' | awk '{print $1}'`
   APK_NAME="$APK_NAME".apk 
   echo "$APK_NAME" 
}

###
#^ start of this script
#
## process options 
while getopts :cfvh OPTION 
do 
  case $OPTION in 
   c)# 
     USECMD=true
     ;;
   f)#
     echo force restart adg.
     FORCE_RESTART_ADG=1
     ;;
   v)#
     echo "`basename $0` $VERSION"
     exit 0
     ;;
   h)#
     OPTION_HELP="yes"
     ;;
   \?)#
     STR=`echo $1 | grep "^com.*"`
     if [ ! -z $STR ]; then 
        package=$1
     else
	echo $USAGE
        echo "#error: package should like com.XXX..."
        exit 3
     fi
     ;;
  esac
done

## print help 
PROGNAME=adgserver
if [ "$OPTION_HELP" = "yes" ] ; then 
    echo "Usage: $PROGNAME [-cfvh] [package]"
    echo ""
    echo "Valid options:"
    echo ""
    echo "    -h          Print this help"
    echo "    -v          Show adgserver version"
    echo "    -c          Use gdb command mode but not gui"
    echo "    -f          force restart adg"
    echo ""

    echo "Valid package:"
    echo "     valid package should like \"com.ABCD.xxx\"" 
    echo ""
    exit 0; 
fi 

# check whether a android directory.
# if not, will exit.
check_in_android_directory

# get package name  
if [ -z $package ]; then 
    package=`package_name`
    if [ -z $package ]; then 
       echo "Error: no package name!"
       exit 13
    fi 
fi 

# get activity name  
Activity=`activity_name`
if [ -z $Activity ]; then 
   echo "Error: no activity name!"
fi 

# get apk name from .project file.
APKNAME=`apk_name`

# check whether there is a apk in bin directory.
APKPATH=bin/$APKNAME

if [ ! -f $APKPATH ]; then 
   APKPATH=`ls bin/*.apk|tail -1`
   if [ -z $APKPATH ]; then
       echo "Error: no $APKNAME in directory bin, package it first!"
       exit 3
   fi
fi    

#get cpu arch and libs directory.
TMP_DIR="tmp_dir"
unzip $APKPATH -d $TMP_DIR >null 2>&1

if [ ! -d $TMP_DIR ]; then 
  echo "Error: fail to unzip $APKNAME, we must unzip it to get package type"
  exit 4
fi 
#
type_dir=`ls $TMP_DIR/lib`
rm -r $TMP_DIR 
#
if [ $type_dir = "armeabi" ]; then 
  CPU_ARCH="armeabi"
elif [ $type_dir = "armeabi-v7a" ]; then  
  CPU_ARCH="armeabi-v7a"
elif [ $type_dir = "x86" ]; then 
  CPU_ARCH="x86"
fi

ABI=$CPU_ARCH

# print pakcage informatin
echo "APK         $APKNAME" 
echo "Package     $package" 
echo "CPU-ARCH    $CPU_ARCH" 
echo ""

APP_OUT=./obj/local/$CPU_ARCH
APP_PROCESS=$APP_OUT/app_process

# check devices
dev_state=`adb get-state`
if [ "$dev_state" = "unknown" ]; then 
  dev_count=`adb devices | sed 1d | grep device -c`
  if [ $dev_count -eq "0" ]; then 
     echo "error: device not found"
  else
     echo "error: more than one device and emulator"
  fi
  exit 32 
fi  

# check gdbserver in package 
# if no gdbserver in $APP_OUT, it means this is a release package.
# then it's need to copy gdbserver into the package on device. 
DEBUGGABLE="YES"
if [ ! -r "./libs/$ABI/gdbserver" ]; then 
   echo "This is a release package" 
   DEBUGGABLE="NO"
   NDK_GDB=`which ndk-gdb`
   NDK_GDB_DIR=`dirname $NDK_GDB`
   GDBSERVER_PATH="$NDK_GDB_DIR/prebuilt/android-arm/gdbserver/gdbserver"
   cp -f $GDBSERVER_PATH ./libs/$ABI/
   cp -f $GDBSERVER_PATH $APP_OUT/   
 
   # push gdbserver to device. 
   adb push ./libs/$ABI/gdbserver  /sdcard/
   adb shell su -c "cp -f /sdcard/gdbserver /data/data/$package/lib"         
   adb shell su -c "chmod 777 /data/data/$package/lib/gdbserver"
fi 

# if no gdb.setup, create an empty file.
if [ ! -r ".libs/$ABI/gdb.setup" ]; then 
   echo "set solib-search-path ./obj/local/$ABI" >  ./libs/$ABI/gdb.setup 
fi 

# kill existing gdbserver on device.
# for release package, we start by cd and ./lib/gdbserver.
GDBSERVER_PID=`android_program_pid lib/gdbserver`
# 
if [ "GDBSERVER_PID" != "0" ]; then 
   adb shell su -c "kill -9 $GDBSERVER_PID"  
elif [ "GDBSERVER_PID" = "0" ]; then 
   GDBSERVER_PID=`android_program_pid ./lib/gdbserver`
   if [ "$GDBSERVER_PID" != "0" ]; then 
       echo "kill gdbserver: $GDBSERVER_PID" 
       adb shell su -c "kill -9 $GDBSERVER_PID"
   fi
fi 

# check whether App exists. Just attach to it if exists, or else need to start first.
PID=`android_program_pid $package`
if [ "$PID" = "0" ]; then
   run adb shell "am start -n $package/$Activity"
   adb shell sleep 5
   PID=`android_program_pid $package`
fi 
echo "Pid of package $package: $PID"

## kill process of "adb shell run-as .. lib/gdbser " on PC.
ps ax | grep "lib/gdbserver +debug-socket" | awk '{print $1}' | xargs kill -9

# start program by gdbserver, and attach to it. 
#run adb shell run-as $package lib/gdbserver +debug-socket --attach $PID > ~/.gdb.log &
run adb shell "run-as $package lib/gdbserver +debug-socket --attach $PID" &
GDB_SERVER_PID=`android_program_pid lib/gdbserver`

if [ "$GDB_SERVER_PID" = "0" ]; then
   run adb shell su -c "cd /data/data/$package && ./lib/gdbserver +debug-socket --attach $PID " &
   GDB_SERVER_PID=`android_program_pid ./lib/gdbserver`

   if [ "$GDB_SERVER_PID" = "0" ]; then 
      run adb shell "cd /data/data/$package ; su -c ./lib/gdbserver +debug-socket --attach $PID " &
      GDB_SERVER_PID=`android_program_pid ./lib/gdbserver`
      echo $GDB_SERVER_PID
      if [ "$GDB_SERVER_PID" = "0" ]; then 
         echo "fail to start gdbserver!"
         echo "Do you install package $package?"
         exit 2;
      fi 
   fi
fi

# wait for gdbserver attach to pid.
sleep 3
if [ $? != 0 ]; then
   echo "ERROR: Could not launch gdbserver on device ?"
   exit 1
fi 

# port redirection
run adb forward tcp:5039 localfilesystem:/data/data/$package/debug-socket

#pull files from devices
##
adb pull /system/bin/app_process $APP_OUT/app_process >/dev/null 2>&1
echo "Pulled app_process from device/emulator."
##
adb pull /system/bin/linker $APP_OUT/linker >/dev/null 2>&1 
echo "Pulled linker form device/emulator."
##
adb pull /system/lib/libc.so $APP_OUT/libc.so >/dev/null 2>&1
echo "Pulled libc.so from device/emulator."

if [ $CPU_ARCH = "x86" ]; then
    GDB_PREFIX=i686-linux-android- 
else 
    GDB_PREFIX=arm-linux-androideabi-
fi  

GDBCMD=${GDB_PREFIX}gdb
GDBSETUP=$APP_OUT/gdb.setup

# print debugger informatin
echo ""
echo "GDB CLIENT:  $GDBCMD" 
echo "SETUP FILE:  $GDBSETUP"
echo ""

#echo "copy ./libs/$CPU_ARCH/gdb.setup to $GDBSETUP"
cp -f ./libs/$CPU_ARCH/gdb.setup $GDBSETUP 

# generate gdb initializing commands to GDBSETUP
echo "file $APP_PROCESS" >> $GDBSETUP
echo "target remote :5039" >> $GDBSETUP
echo "set print object on" >> $GDBSETUP
echo "sharedlibrary" >> $GDBSETUP
echo "info program" >> $GDBSETUP

# if has option [-c], just gdb started but not adg.
if [ "$USECMD" = "true" ]; then 
   echo "Just start gdb as debugger!"
   echo "" 
   $GDBCMD -x $GDBSETUP 
   exit 0 
fi 

## the following steps is trying to start adg ....

## kill adg_driver process 
adg_driver_process=`ps| grep adg_driver -c`
if [ $adg_driver_process -ne "0" ]; then 
    if [ -z $FORCE_RESTART_ADG ]; then
        echo ADG resused, input in adg \"target remote :5039\"
        exit 0 
    fi
    killall adg_driver >/dev/null 2>&1 
fi

#^ start to process adg --- 
## change gdb.setup into 1 line characters.
echo "start to set adg_config.ini according to gdb.setup"
adg_startupcommands="StartupCommands"
tmp_file="gdb.tmp"
cp $GDBSETUP $tmp_file 
adg_startupcommands_value=`sed ':label;N;s/\n/\\\n/;b label' $tmp_file`
rm $tmp_file 

## check Debugger 
echo "check Debugger for adg"
adg_debugger="Debugger"
adg_debugger_value=`which $GDBCMD`
if [ -z $adg_debugger_value ]; then 
    echo "can't find arm-linux-androideabi-gdb"
    exit 3
fi 

### set adg_config.ini for affinic debugger gui. 
echo "check file adg config file"
adg_config_file=~/.config/adg_config.ini


echo adg config file path: $(ls  "$adg_config_file")

if [ ! -f "$adg_config_file" ]; then 
   echo "$adg_config_file does not exist!"
   exit 1
fi 

sed -i '/Debugger=/d' "$adg_config_file" 
sed -i '/StartupCommands=/d' "$adg_config_file" 

echo "start to update adg_config.ini according gdb.setup"
### set Debugger info adg_config.ini 
echo "Debugger=$adg_debugger_value" >> "$adg_config_file"
### set gdb start up commands into adg_config.ini
echo "StartupCommands=$adg_startupcommands_value" >> "$adg_config_file"

#^ create Affinic Debugger.ini when first start adg.  
##
tmp_current_path=`pwd`
# get info config directory to operate Affinic Debugger.ini easily. 
cd ~/.config
#"Affinic Debugger.ini" is the config file to adg. 
affinic_debugger_ini="Affinic Debugger.ini"
# to generate file "Affinic Debugger.ini" 
if [ ! -r "$affinic_debugger_ini" ]; then 
   echo "Error: no file Affinic Debugger.ini in ~/.config directory"
   echo "Generate Affinic Debugger.ini as follows:"
   echo "1.start Affinic Debugger GUI: adg"
   echo "2.close Affinic Debugger GUI" 
   echo "3.start adgserver again     : adgserver" 
   exit 2
fi 
#
UseExternalConfig=`echo "$affinic_debugger_ini" | grep "UseExternalConfig=true"`
if [ -z $UseExternalConfig ]; then 
   cur_user=`whoami`
   #set "UseExternalConfig=" to "UseExternalConfig=true" 
   sed -i 's/UseExternalConfig/UseExternalConfig=true/' "$affinic_debugger_ini"
   #set "ExternalConfigFile=" to "ExternalConfigFile=/home/$user/.config/adg_config.ini"
   sed -i "s/ExternalConfigFile=.*/ExternalConfigFile=\/home\/$cur_user\/\.config\/adg_config\.ini/" "$affinic_debugger_ini"
fi
# recover to android working path. 
cd $tmp_current_path
#$

# start adg 
echo "start Affinic Debugger GUI now ..."
adg& >/dev/null 2>&1 
echo "success to launch adg!" 
exit 0
